import Head from 'next/head'
import { Box, Container, Divider, Grid, GridItem, HStack, Heading, VStack, useColorModeValue } from '@chakra-ui/react'
import { GetStaticPaths, GetStaticProps, GetStaticPropsContext } from 'next'
import UnderConstructionBox from '../../src/components/under-construction'
import userService from '../../src/services/user.service'
import usersService from '../../src/services/users.service'
import { RenderIf } from '../../src/components/render-if'
import FileBox from '../../src/components/file-box'
import { FilePublic } from '../../src/store'

interface UserProfileProps {
  username: string
  publicFiles: FilePublic[]
}
export default function UserProfile({ username, publicFiles }: UserProfileProps) {

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box as='main' h='full' flex='1' display={'flex'} flexDirection='column' justifyContent={'center'} >

        <RenderIf condition={publicFiles.length > 0}>
          <Container maxW={'container.lg'}>
            <Box as='main' bg={useColorModeValue('white', 'gray.800')} flex='1' borderWidth={2} borderColor='whiteAlpha.400' borderRadius={'md'} p={4} py={10} display={'flex'} flexDirection={'column'}>
              <VStack gap={5} display={'flex'} flexDirection={'column'} alignItems={'center'} justifyContent={'center'} h='full' flex={1}  >
                <Heading>
                  {username} Files
                </Heading>
                <Divider />

                <Grid templateColumns={"repeat(auto-fill, minmax(150px, 1fr))"} gap={6} alignItems='center'>
                  {publicFiles.map((file) => (
                    <GridItem h='100%' display={'flex'} justifyContent='center' key={file.id}>
                      <FileBox file={file} />
                    </GridItem>
                  ))}
                </Grid>
              </VStack>
            </Box>
          </Container>
        </RenderIf>

        <RenderIf condition={publicFiles.length <= 0}>
          <UnderConstructionBox />
        </RenderIf>
      </Box>


    </>
  )
}

export const getStaticPaths: GetStaticPaths = async () => {

  const profiles = await usersService.getUsersPublicProfile()

  const paths = profiles.map(profile => ({
    params: { username: profile.username }
  }))

  return {
    paths,
    fallback: false
  }
}

export const getStaticProps: GetStaticProps = async ({ params }: GetStaticPropsContext) => {

  const { username } = params as { username: string }

  if (!username) return { redirect: { destination: '/', permanent: false } }

  const publicFiles = await userService.getAllPublicFiles(username)

  return {
    props: {
      username,
      publicFiles
    },
    revalidate: 60 // 1 minute
  }
}


