import Head from 'next/head'
import { Avatar, Box, Button, Container, Divider, Grid, GridItem, Heading, Image, Input, Spacer, Spinner, Text, useColorModeValue, VStack } from '@chakra-ui/react'
import { useUser } from '../../src/store'
import { useState } from 'react'
import { useForm } from 'react-hook-form'
import userService from '../../src/services/user.service'

export default function AvatarPage() {

  const { user, refresh } = useUser()
  const { register, handleSubmit, resetField } = useForm()

  const [preview, setPreview] = useState<string | undefined>(user?.avatar?.url)
  const [isLoading, setIsLoading] = useState<Boolean>(false)
  const [error, setError] = useState<string | null>(null)
  const [isFilePicked, setIsFilePicked] = useState<boolean>(false)

  const handleProfileImageChange = (fileList: FileList | null) => {
    if (!fileList) return
    const file = fileList[0]
    if (!file) {
      setPreview(undefined)
      setIsFilePicked(false)
      return
    }
    setIsFilePicked(true)
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onloadend = () => {
      if (typeof reader.result !== 'string') return
      setPreview(reader.result)
    }
  }

  const onSubmit = handleSubmit(async data => {
    try {
      setError(null)
      setIsLoading(true)
      if (!data.avatar) return

      const formData = new FormData()
      formData.append("file", data.avatar[0], data.avatar[0].name)
      await userService.updateAvatar(formData)
      await refresh()
    } catch (error: any) {
      setError(error.message)
    } finally {
      setIsFilePicked(false)  
      setIsLoading(false)
      resetField('avatar')
    }
  })

  return (
    < >
      <Head>
        <title>Avatar</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxW={'container.lg'} p={4} my={'5rem'} display={'flex'} flexDirection={'column'} flex="1">
        <Box as='main' bg={useColorModeValue('white', 'gray.800')} flex='1' borderWidth={2} borderColor='whiteAlpha.400' borderRadius={'md'} p={4} display={'flex'} flexDirection={'column'}>
          <VStack gap={5} display={'flex'} flexDirection={'column'} alignItems={'center'} justifyContent={'center'} h='full' flex={1}  >
            <Heading>
              Change Avatar
            </Heading>
            <Heading size='sm' color={'gray.500'}>
              For demo purposes, files will be deleted with frequency.
            </Heading>
            <Divider />
            <Box display={'flex'} flexDirection={'column'} alignItems={'center'} justifyContent={'center'} h='full' flex={1} >
              <Grid templateColumns={["repeat(1, 1fr)", "repeat(2, 1fr)"]} gap={6} alignItems='center'>
                <GridItem colSpan={1} margin='0 auto' >
                  <Avatar size={'2xl'} src={preview} />
                </GridItem>
                <GridItem colSpan={1} alignItems='center' h='100%' display={'flex'}>
                  <Box as={'form'} gap={3} onSubmit={onSubmit}>
                    <VStack>
                      {isLoading && (
                        <Spinner />
                      )}
                      {error && (
                        <Text color='red.500' textAlign={'center'}>{error}</Text>
                      )}
                      <Input
                        placeholder="Select Date and Time"
                        variant={'filled'}
                        size="md"
                        colorScheme="blue"
                        color="blue.500"
                        ringColor={useColorModeValue('blue.500', 'blue.300')}
                        display={'flex'}
                        alignItems={'center'}
                        justifyContent={'center'}
                        py='3px'
                        accept='image/jpeg, image/png, image/jpg'
                        _hover={{
                          borderColor: useColorModeValue('blue.500', 'blue.300'),
                        }}
                        type="file"
                        {...register('avatar')}
                        onChange={(e) => handleProfileImageChange(e.target.files)}
                      />
                      <Button variant={'outline'} w={'full'} type='submit' disabled={!isFilePicked}>
                        Save
                      </Button>
                      <Text color={'gray.500'}>Max file size: 1MB</Text>
                    </VStack>
                  </Box>
                </GridItem>
              </Grid>
            </Box>

          </VStack>
        </Box>
      </Container >

    </>
  )
}
