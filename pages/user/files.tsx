import { useEffect, useState } from 'react'
import Head from 'next/head'
import { Box, Button, Container, Divider, Flex, Grid, GridItem, Heading, useColorModeValue, useDisclosure, VStack } from '@chakra-ui/react'

import FileUploadBox from '../../src/components/file-upload-box'
import FileBox from '../../src/components/file-box'
import { HiUpload } from 'react-icons/hi'
import { useQuery } from '@tanstack/react-query'
import userService from '../../src/services/user.service'
import { FilePublic, useUser } from '../../src/store'
import { FormProvider, useForm } from 'react-hook-form'

export default function MyFilesPage() {

  const { user } = useUser()

  const query = useQuery({
    queryKey: ['user_public-file'], queryFn: async () => {
      if (!user) return []
      return userService.getAllPublicFiles(user?.username)
    },
    initialData: [],
    refetchOnWindowFocus: false,
    enabled: user ? true : false,
  })

  const [isFileLoaded, setIsFileLoaded] = useState<boolean>(false)
  const [isLoading, setIsLoading] = useState<boolean>(false)
  const [deletingFileId, setDeletingFileId] = useState<string | null>(null)
  const [myFiles, setMyFiles] = useState<FilePublic[]>([])
  const methods = useForm();

  useEffect(() => {
    if (query.isSuccess && query.data) {
      setMyFiles(query.data)
    }
  }, [query.isFetched])

  const onSubmit = methods.handleSubmit(async (data) => {
    setIsLoading(true)
    try {
      const file = data?.file[0] as File
      if (!data.file) return
      const formData = new FormData()
      formData.append('file', file, file.name)
      const filePublic = await userService.uploadPublicFile(formData)
      setMyFiles(prev => [...prev, filePublic])
      setIsFileLoaded(false)
      setIsLoading(false)
    } catch (error: any) {
      console.log(error)
    } finally {
      setIsLoading(false)
    }
  })

  const handleDeleteFile = async (fileId: string) => {
    try {
      setDeletingFileId(fileId)
      await userService.deletePublicFile(fileId)
      setMyFiles(prev => prev.filter(file => file.id !== fileId))
    } catch (error: any) {
      console.log(error);
    } finally {
      setDeletingFileId(null)
    }
  }


  return (
    < >
      <Head>
        <title>My Files</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxW={'container.lg'} p={4} my={'5rem'} display={'flex'} flexDirection={'column'} flex="1">
        <Box as='main' bg={useColorModeValue('white', 'gray.800')} flex='1' borderWidth={2} borderColor='whiteAlpha.400' borderRadius={'md'} p={4} display={'flex'} flexDirection={'column'}>
          <VStack gap={5} display={'flex'} flexDirection={'column'} alignItems={'center'} justifyContent={'center'} h='full' flex={1}  >
            <Heading>
              My Files
            </Heading>
            <Heading size='sm' color={'gray.500'}>
              For demo purposes, files will be deleted with frequency.
              <br />
              Currently, only pdf files are supported.
            </Heading>
            <Divider />
            <Container maxW={'container.lg'} >
              <FormProvider {...methods} >
                <form onSubmit={onSubmit} id='form-attachment' >
                  <Grid templateColumns={"repeat(auto-fill, minmax(150px, 1fr))"} gap={6} alignItems='center'>

                    {myFiles.map((file) => (
                      <GridItem h='100%' display={'flex'} justifyContent='center' key={file.id}>
                        <FileBox file={file} onDeleteFile={handleDeleteFile} isDeleting={deletingFileId === file.id} />
                      </GridItem>
                    ))}
                    <GridItem h='100%' display={'flex'} justifyContent='center' >

                      <FileUploadBox isLoading={isLoading} setIsFileLoaded={setIsFileLoaded} />

                    </GridItem>
                  </Grid>
                  <Divider my={4} />
                  <Flex justifyContent={'end'} >

                    <Button w={['full', 'md', 'sm']} leftIcon={<HiUpload />} type='submit' form='form-attachment' disabled={!isFileLoaded || isLoading ? true : false} >
                      {isFileLoaded && !isLoading && 'Upload'}
                      {!isFileLoaded && !isLoading && 'No file selected'}
                      {isFileLoaded && isLoading && 'Uploading...'}
                    </Button>

                  </Flex>
                </form>
              </FormProvider>
            </Container>

          </VStack>
        </Box >
      </Container >

    </>
  )
}

